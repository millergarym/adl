// This is based on Golang's modules and workspace.
// e.g. see https://go.dev/ref/mod#workspaces

module adlc.packaging {

import sys.types.Pair;

type AdlWorkspace0 = AdlWorkspace<AdlPackageRef>;
type AdlWorkspace1 = AdlWorkspace<Pair<AdlPackageRef,AdlPackage>>;

/// Expected to live in a file named `adl.work.json`
struct AdlWorkspace<T> {
    String adlc;
    Vector<T> use;
    Bool use_embedded_sys_loader = true;
};

// key must be a path to a directory directly under the folder containing the `adl.work.json` file.
// type AdlPackageRefs = StringMap<AdlPackageRef>;

type AdlPackageRefs = Vector<AdlPackageRef>;

struct AdlPackageRef {
    String path;
    Nullable<TypescriptGenOptions> ts_opts = null; 
};

struct TypescriptGenOptions {
    String npm_pkg_name;
    OutputOpts outputs = { "ref": {}};
    TsRuntimeOpt runtime_opts = { "packageRef": "@adl-lang/runtime" };
    Bool generate_transitive = false;
    Bool include_resolver = false;
    TsStyle ts_style = "tsc";
    ModuleSrc modules = "all";
    Bool capitalize_branch_names_in_types = true;
    Bool capitalize_type_names = true;
// Vector<> searchDir;
// --merge-adlext=EXT
// --verbose
// --no-overwrite
// --exclude-ast
// --excluded-ast-annotations=SCOPEDNAMES
};

union TsRuntimeOpt {
    String packageRef;
    TsGenRuntime generate;
};

struct TsGenRuntime {
    String runtimeDir;
};

union OutputOpts {
    GenOutput gen;
    PkgRef ref;
};

struct PkgRef {
};

struct GenOutput {
    ReferenceableScopeOption referenceable = "local";
    String outputDir;
    Nullable<String> manifest = null;
};

union TsStyle {
    Void tsc;
    Void deno;
};

union ModuleSrc {
    Void all;
    Vector<String> modules;
};

union ReferenceableScopeOption {
    /// Generated code will only be referred internal to the repo
    Void local;
    /// Generated code can be published via a package manager (e.g. npm)
    Void remote;
};

/// Expected to live in a file named `adl.pkg.json`
struct AdlPackage {
    String path;
    Nullable<String> globalAlias = null;
    /// Version
    String adlc;
    Vector<Require> requires = [];
    Vector<Exclude> excludes = [];
    Vector<Replace> replaces = [];
    Vector<Retract> retracts = [];
};

struct PackageDirective {
    String path;
    Nullable<String> repo = null;
};

struct Require {
    String path;
    String version;
    Bool indirect = false;
};

struct Exclude {
    String path;
    String version;
};

struct Replace {
    String path;
    Nullable<String> version;
};

struct Retract {
    String version;
    Nullable<String> comment = null;
};

};
