package main

import (
	"bytes"
	"html/template"
	"sort"
	"strings"

	"github.com/golang/glog"

	"github.com/wxio/tron-go/adl"
)

func TemplADL(amod *adl.Module) error {
	fmap := map[string]interface{}{
		"cap1st": func(val string) string {
			return strings.ToUpper(string(val[0])) + val[1:]
		},
		"lower": func(val string) string {
			return strings.ToLower(val)
		},
		"typeMap": func(typeRef adl.TypeRef) string {
			switch *typeRef.Primitive {
			case "Int32":
				return "int32"
			case "String":
				return "string"
			default:
				return *typeRef.Primitive
			}
		},
	}
	// out := os.Stdout
	out := &bytes.Buffer{}
	tmpl, err := template.New("").
		Funcs(fmap).
		Parse(tmplStr)
	if err != nil {
		glog.Warningf("%v", err)
		return err
	}
	if err = tmpl.ExecuteTemplate(out, "package", amod); err != nil {
		glog.Warningf("%v", err)
		return err
	}
	names := []string{}
	for name, _ := range amod.Decls {
		names = append(names, name)
	}
	sort.Sort(sort.StringSlice(names))
	for _, name := range names {
		decl := amod.Decls[name]
		if decl.Type.Struct != nil {
			if err = tmpl.ExecuteTemplate(out, "structInterface", decl); err != nil {
				glog.Warningf("%v", err)
				return err
			}
			if err = tmpl.ExecuteTemplate(out, "structStruct", decl); err != nil {
				glog.Warningf("%v", err)
				return err
			}
			for i, _ := range decl.Type.Struct.Field {
				data := struct {
					Iface string
					Field adl.Field
					Next  string
				}{
					Iface: decl.Name,
					Field: decl.Type.Struct.Field[i],
				}
				if i != len(decl.Type.Struct.Field)-1 {
					data.Next = decl.Type.Struct.Field[i+1].Name
				}
				if err = tmpl.ExecuteTemplate(out, "structBuilder", data); err != nil {
					glog.Warningf("%v", err)
					return err
				}
			}
			if len(decl.Type.Struct.Field) > 0 {
				data := struct {
					Iface string
					First string
				}{
					Iface: decl.Name,
					First: decl.Type.Struct.Field[0].Name,
				}
				if err = tmpl.ExecuteTemplate(out, "structBuilderLast", data); err != nil {
					glog.Warningf("%v", err)
					return err
				}
			}
		}
	}
	return nil
}

var structInterfaceTmpl = `
type {{cap1st .Name}} interface {
{{- range $fld := .Type.Struct.Field }}
	{{cap1st .Name}}() {{typeMap .TypeExpr.TypeRef}}
{{- end}}
}
`

var tmplStr = `
{{define "package" -}}
//// Code generated by go2adl. DO NOT EDIT.
// source: 

package {{.Name}}

{{end}}

{{define "structInterface" -}}
type {{cap1st .Name}} interface {
{{- range $fld := .Type.Struct.Field }}
	{{cap1st .Name}}() {{typeMap .TypeExpr.TypeRef}}
{{- end}}
}
{{end}}

{{define "structStruct" -}}
{{$sname := lower .Name -}}
{{$iname := cap1st .Name -}}
type {{lower .Name}} struct {
{{- range $fld := .Type.Struct.Field }}
	{{lower .Name}} {{typeMap .TypeExpr.TypeRef}}
{{- end}}
}

var _ {{cap1st .Name}} = {{lower .Name}}{}
{{range $fld := .Type.Struct.Field}}
func (obj {{$sname}}) {{cap1st .Name}}() {{typeMap .TypeExpr.TypeRef}} { return obj.{{lower .Name}} }
{{- end}}

func New{{$iname}}( {{- range $i, $fld := .Type.Struct.Field -}}
	{{if gt $i 0}},{{end}}{{lower .Name}} {{typeMap .TypeExpr.TypeRef}}
	{{- end -}}
) {{$iname}} {
	return {{$sname}}{
		{{- range $fld := .Type.Struct.Field}}
		{{lower .Name}}: {{lower .Name}},
		{{- end}}
	}
}
{{end}}

{{define "structBuilder"}}
type {{cap1st .Iface}}_builder_{{cap1st .Field.Name}} interface {
	{{cap1st .Field.Name}}({{typeMap .Field.TypeExpr.TypeRef}}) {{cap1st .Iface}}_builder{{if .Next}}_{{cap1st .Next}}{{end}}
}

func (br *{{lower .Iface}}_builder) {{cap1st .Field.Name}}({{lower .Field.Name}} {{typeMap .Field.TypeExpr.TypeRef}}) {{cap1st .Iface}}_builder{{if .Next}}_{{cap1st .Next}}{{end}} {
	br.obj.{{lower .Field.Name}} = {{lower .Field.Name}}
	return br
}

{{end}}

{{define "structBuilderLast"}}
type {{cap1st .Iface}}_builder interface {
	{{cap1st .Iface}}() {{cap1st .Iface}}
}

type {{lower .Iface}}_builder struct {
	obj {{lower .Iface}}
}
func (br {{lower .Iface}}_builder) {{cap1st .Iface}}() {{cap1st .Iface}} {
	return br.obj
}
func New{{cap1st .Iface}}_builder() {{cap1st .Iface}}_builder_{{cap1st .First}} {
	return &{{lower .Iface}}_builder{obj: {{lower .Iface}}{}}
}

{{end}}


`
